@page "/shoppingcart"
@using Newtonsoft.Json;
@using TicketHive.Shared.Models;
@using TicketHive.Shared;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject AuthenticationStateProvider authProvider;
@inject NavigationManager navigationManager;
@inject IUserRepo userRepo;
<h3>Shoppingcart</h3>


@if (cartItems != null)
{
    <div class="row row-cols-3 row-cols-md-3 g-4 center">
        @foreach (var item in cartItems)
        {


            <div class="col">
                <div class="card">
                    <div class="card-body">
                        <img src="/Images/@item.EventModel.Image" class="card-img-top" alt="...">
                        <h5 class="card-title">@item.EventModel.EventName</h5>
                        <div>
                            <p>Do you want to change the amount of tickets?</p>
                            <select id="input-combobox" @bind="item.Quantity">
                                @for (int i = 1; i < 11; i++)
                                {
                                    <option value=@i>@i.ToString()</option>
                                }

                            </select>
                        </div>

                        
                        <input class="btn btn-success" type="button" style="text-align:center" value="Book" @onclick="AddBookingsToUser" />
                        <input class="btn btn-danger" type="button" @onclick="(() => RemoveFromCart(item.EventModelId))" value="REMOVE" />
                        
                    </div>
                </div>
            </div>
           





            @*<img src="@item.EventModel.Image" />
            <h1 id="Title">@item.EventModel.EventName</h1>

            <div>
                <p>Do you want to change the amount of tickets?</p>
                <select id="input-combobox" @bind="item.Quantity">
                    @for (int i = 1; i < 11; i++)
                    {
                        <option value=@i>@i.ToString()</option>
                    }

                </select>
            </div>


            <div>
                <input class="btn btn-danger" type="button" @onclick="(() => RemoveFromCart(item.EventModelId))" value="REMOVE" />
            </div>*@

        }
    </div>


   
}



@code {
    private List<BookingModel> cartItems = new();
    private string username;

    protected override async Task OnInitializedAsync()
    {
        var jsonString = await localStorage.GetItemAsync<string>("cart");

        if (jsonString != null)
        {
            cartItems = JsonConvert.DeserializeObject<List<BookingModel>>(jsonString);
        }
    }

    private async Task RemoveFromCart(int eventId)
    {
        string bookingsJson = await localStorage.GetItemAsync<string>("cart");

        List<BookingModel>? localStorageBookings = JsonConvert.DeserializeObject<List<BookingModel>>(bookingsJson);

        localStorageBookings.RemoveAll(b => b.EventModelId == eventId);

        string updatedBookingsJson = JsonConvert.SerializeObject(localStorageBookings);

        await localStorage.SetItemAsync("cart", updatedBookingsJson);

        var jsonString = await localStorage.GetItemAsync<string>("cart");
        cartItems = JsonConvert.DeserializeObject<List<BookingModel>>(jsonString);
    }

    private async Task AddBookingsToUser()
    {
        UserModel eventDbUser;
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
        }

        eventDbUser = await userRepo.GetUser(username);

        foreach (var item in cartItems)
        {

            BookingInfoModel bookingInfo = new()
                {
                    User = eventDbUser,
                    Booking = item
                };
            userRepo.AddBookingToUser(bookingInfo);
        }

        navigationManager.NavigateTo("/confirmation");
    }








}
<style>

    #title{
        text-align:center;
        font-family:monospace;
        color: #305076
    }

    




</style>