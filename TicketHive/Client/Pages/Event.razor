@page "/event/{id:int}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using System.Net;
@using TicketHive.Shared.Models;
@using TicketHive.Shared;
@using Microsoft.AspNetCore.Http;
@inject IEventRepo eventRepo;
@inject IUserRepo userRepo;
@inject IShoppingcartRepo shoppingcartRepo;
@inject NavigationManager navigationManager;

<header class="p-5"></header>
<div class="row">
<div class=" col-6" >
    <img style="max-width: 500px" src="/Images/@chosenEvent.Image"/>
</div>

<div class="col-6  ">
        <form @onsubmit="HandleSubmit">
        <h2 class="text-decoration-underline">@chosenEvent.EventName</h2>
        <div ><em>@chosenEvent.EventDetails</em></div>
        <div ><p><b>@chosenEvent.EventPlace</b> @chosenEvent.Date</p></div>
        <div ><p><b>@chosenEvent.PricePerTicket</b>:-</p></div>
        
        <div>
            
                <select id="input-combobox" @bind="NumberOfTickets">
                @for (int i = 1; i < 11; i++)
                {
                    <option value=@i>@i.ToString()</option>
                }

            </select>
            @if (chosenEvent.AvailableTickets < 1)
            {
                    <em>Not available</em>
                    <input disabled="@isDisabled" type="submit" style="text-align:center" value="Add to cart" />
            }
            else
            {
                <input type="submit" style="text-align:center" value="Add to cart" />
            }
            
        </div>
       
        </form>
</div>
</div>


<style>
    p,em,h2
    {
        color: #32516E;
        
    }
    div, select{
        background-color: #FCE693;
    }
</style>


@code {
    private bool isDisabled = true;
    private string? username;
    private UserModel? eventDbUser;
    private List<BookingModel> bookings = new();

    protected override async Task OnInitializedAsync()
    {
        chosenEvent = await eventRepo.GetEvent(Id);
        await shoppingcartRepo.CreateCart(bookings);
    }

    private async Task<bool> AddBooking()
    {
        BookingModel booking = new()
            {
                EventModelId = chosenEvent.Id,
                EventModel = chosenEvent,
                Quantity = NumberOfTickets
            };

        if (!await shoppingcartRepo.CheckIfItemExists(booking))
        {
            await shoppingcartRepo.AddToCart(booking);
            return true;
        }
        return false;

    }
    private async Task HandleSubmit()
    {
        await AddBooking();
        navigationManager.NavigateTo("/shoppingcart");
    }
}

