@page "/event/{id:int}"
@attribute [Authorize]
@using Newtonsoft.Json;
@using System.Net;
@using TicketHive.Shared.Models;
@using TicketHive.Shared;
@using Microsoft.AspNetCore.Http;
@inject IEventRepo eventRepo;
@inject IUserRepo userRepo;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager navigationManager;

<header class="p-5"></header>
<div class="row">
<div class=" col-6" >
    <img style="max-width: 500px" src="/Images/@chosenEvent.Image"/>
</div>

<div class="col-6  ">
        <form @onsubmit="HandleSubmit">
        <h2 class="text-decoration-underline">@chosenEvent.EventName</h2>
        <div ><em>@chosenEvent.EventDetails</em></div>
        <div ><p><b>@chosenEvent.EventPlace</b> @chosenEvent.Date</p></div>
        <div ><p><b>@chosenEvent.PricePerTicket</b>:-</p></div>
        
        <div>
            
                <select id="input-combobox" @bind="NumberOfTickets">
                @for (int i = 1; i < 11; i++)
                {
                    <option value=@i>@i.ToString()</option>
                }

            </select>
            
            <input type="submit" style="text-align:center" value="Add to cart" />
        </div>
       
        </form>
</div>
</div>


<style>
    p,em,h2
    {
        color: #32516E;
        
    }
    div, select{
        background-color: #FCE693;
    }
</style>


@code {
    private string? username;
    private UserModel? eventDbUser;
    private List<BookingModel> bookings = new();

    protected override async Task OnInitializedAsync()
    {
        chosenEvent = await eventRepo.GetEvent(Id);
        await CreateCart();
    }

    private async Task AddBooking()
    {
        BookingModel booking = new()
            {
                EventModelId = chosenEvent.Id,
                EventModel = chosenEvent,
                Quantity = NumberOfTickets
            };
        await UpdateCart(booking);
    }
    private async Task HandleSubmit()
    {
        await AddBooking();
        navigationManager.NavigateTo("/shoppingcart");
    }

    private async Task CreateCart()
    {
        string bookingsJson = JsonConvert.SerializeObject(bookings);

        if (!await localStorage.ContainKeyAsync("cart"))
        {
            await localStorage.SetItemAsync("cart", bookingsJson);
        }
    }

    private async Task UpdateCart(BookingModel booking)
    {
        string bookingsJson = await localStorage.GetItemAsync<string>("cart");

        List<BookingModel>? localStorageBookings = JsonConvert.DeserializeObject<List<BookingModel>>(bookingsJson);

        localStorageBookings.Add(booking);
        string updatedBookingsJson = JsonConvert.SerializeObject(localStorageBookings);

        await localStorage.SetItemAsync("cart", updatedBookingsJson);
    }

}

