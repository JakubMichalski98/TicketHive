@page "/home"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Shared.Models;
@using TicketHive.Shared;
@inject IUserRepo userRepo;
@inject IEventRepo eventRepo;
@inject IBookingRepo bookingRepo;
@inject IShoppingcartRepo shoppingcartRepo;
@inject AuthenticationStateProvider authProvider


@if (eventDbUser != null && eventDbUser.Bookings.Count > 0)
{
    <header>
        <h1 class="text-center">Welcome to TicketHive</h1>
        <h4>Here is your bookings:</h4>
    </header>
    <div class="row row-cols-3 row-cols-md-3 g-4">
        @foreach (var e in eventDbUser.Bookings)
        {
            <div class="col">
                <div class="card">
                    <div class="card-body">
                        <img style="max-width: 100px" src="/Images/@e.EventModel.Image" class="card-img-top" alt="...">
                        <h5 class="card-title" style="margin-top: 20px;">@e.EventModel.EventName</h5>
                        <p class="card-text"></p>
                        <a href="/event/@e.EventModel.Id" class="btn btn-primary card-btn">Go to event</a>
                    </div>
                </div>
            </div>

        }
    </div>
}
@if (eventDbUser != null && eventDbUser.Bookings.Count == 0)
{
    <header>
        <h1 class="text-center">Welcome to TicketHive</h1>
        <h4>You have no bookings, check out these events:</h4>
    </header>

      <div class="row row-cols-3 row-cols-md-3 g-4">
            @foreach (var e in allEvents)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <img src="/Images/@e.Image" class="card-img-top" alt="...">
                            <h5 class="card-title" style="margin-top: 20px;">@e.EventName</h5>
                            <a href="/event/@e.Id" class="btn btn-primary card-btn">Go to event</a>
                        </div>
                    </div>
                </div>

            }
        </div>
   
}

@code {
    private string? username;
    private UserModel? eventDbUser;
    List<BookingModel>? Bookings;
    private List<EventModel>? allEvents;
    List<BookingModel> Empty = new();

    protected override async Task OnInitializedAsync()
    {
        //await shoppingcartRepo.RemoveCart();
        await shoppingcartRepo.CreateCart(Empty);

        var user = await userRepo.GetLoggedInUser();

        if (username != "admin")
        {
            eventDbUser = user;
        }

        if (eventDbUser != null)
        {
            Bookings = eventDbUser.Bookings;
        }

        allEvents = await eventRepo.GetAllEvents();

    }

    
}